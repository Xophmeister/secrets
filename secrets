#!/usr/bin/env bash

# Secrets
# A command line based secret manager

# License: GPLv3, or later
# Author: Christopher Harrison <ch12@sanger.ac.uk>
# Copyright (c) 2017 Genome Research Ltd.

PROGNAME="$(basename "$0")"
VERSION="0.0.1"

stderr() {
  # Echo to stderr
  local message="$*"

  if [[ -t 2 ]]; then
    # Use ANSI red if stderr is a TTY
    message="\033[0;31m${message}\033[0m"
  fi

  >&2 echo -e "${message}"
}

usage() {
  local subcommand="${1:-}"

  case "${subcommand}" in
    "keep")
      cat <<-EOF
	Usage: ${PROGNAME} ${subcommand} [OPTIONS] SECRET_ID [SECRET]
	       ${PROGNAME} ${subcommand} (-h | --help)
	
	Keep a secret with the identifier of SECRET_ID. The secret can be
	specified with the plaintext given in SECRET, or generated following the
	rule policy provided by the options.
	
	Options:
	
	  --secrets FILE        Secrets file [~/.secrets]
	  --force               Overwrite the secret if it already exists
	  --length LENGTH       Length [16]
	  --allowed CLASS       Class of allowed characters [a-zA-Z0-9!?$%&=+_-]
	  --must-include CLASS  Class of characters that must be included (this
	                        option can be provided multiple times)
	
	The default policy will generate a secret with 284 bits of entropy.
	
	If the secrets file has not yet been created, you will be prompted for
	your GnuPG encryption and signing key IDs.
	EOF
    ;;

    "tell")
      cat <<-EOF
	Usage: ${PROGNAME} ${subcommand} [OPTIONS] SECRET_ID
	       ${PROGNAME} ${subcommand} (-h | --help)
	
	Tell the secret with the identifier of SECRET_ID.
	
	Options:
	
	  --secrets FILE        Secrets file [~/.secrets]
	  --copy                Copy the secret to the clipboard, if supported,
	                        rather than outputting to stdout
	  --expire SECONDS      Delete the secret from the clipboard, if used,
	                        after a time limit [30]
EOF
    ;;

    "forget")
      cat <<-EOF
	Usage: ${PROGNAME} ${subcommand} [OPTIONS] SECRET_ID
	       ${PROGNAME} ${subcommand} (-h | --help)
	
	Forget the secret with the identifier of SECRET_ID.
	
	Options:
	
	  --secrets FILE        Secrets file [~/.secrets]
	EOF
    ;;

    *)
      cat <<-EOF
	Usage: ${PROGNAME} SUBCOMMAND [OPTIONS]
	       ${PROGNAME} (-V | --version)
	       ${PROGNAME} (-h | --help)
	
	Subcommands:
	
	  keep    Keep a secret
	  tell    Tell a secret
	  forget  Forget a secret
	
	The -h or --help option can be used against any subcommand for details.
	EOF
    ;;
  esac
}

show_version() {
  cat <<-EOF
	${PROGNAME} v${VERSION}
	Copyright (c) 2017 Genome Research Ltd.
	
	This program comes with ABSOLUTELY NO WARRANTY. This is free software,
	which you are welcome to redistribute under the conditions of the GNU
	Public License v3, or later.
	EOF
}

has_dependencies() {
  # Check dependencies exist as commands
  local -a deps=("$@")

  for cmd in "${deps[@]}"; do
    command -v -- "${cmd}" &>/dev/null
  done
}

main() {
  if ! has_dependencies gpg jq; then
    stderr "${PROGNAME} requires both GnuPG and jq to be installed!"
    exit 1
  fi
}

main
